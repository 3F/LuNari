<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>1.6.0</Version>
    <BuildInfoVSSBE></BuildInfoVSSBE>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>net40;net472;netstandard2.0</TargetFrameworks>
    <RootNamespace>net.r_eg.LuNari</RootNamespace>
    <AssemblyName>LuNari</AssemblyName>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>LuNari</PackageId>
    <Copyright>Copyright (c) 2016,2017,2019  Denis Kuzmin &lt; entry.reg@gmail.com &gt; GitHub/3F</Copyright>
    <Title>[ LuNari ] Lua for .NET: Lua 5.4, 5.3, 5.2, 5.1, ...</Title>
    <PackageIcon>LuNari.png</PackageIcon>
    <IconUrl>https://raw.githubusercontent.com/3F/LuNari/master/LuNari/Resources/LuNari.png</IconUrl>
    <Description>
        
        🗦🌔 LuNari is Lua for .NET on Conari engine
        All actual Lua versions, like: Lua 5.4, 5.3, 5.2, 5.1, ...

        MIT License: https://github.com/3F/LuNari


        ## Why LuNari ?

        Most popular features that will be adapted to your needs on the fly.

        🔍 Easy to start:

        ```csharp
        using(var l = new Lua&lt;ILua53&gt;("Lua.dll")) { /* ILua51, ILua52, ILua53, ... */ }
        ```

        🚀 Awesome speed:

        Based on the fast versions of Conari engine with caching of 0x29 opcodes (Calli).
        https://github.com/3F/Conari#why-conari-


        🔨 Its amazing dynamic features:

        ```csharp
        using(dynamic l = new LuaD("Lua.dll"))
        {
            // Lua now is yours ~
            IntPtr L = l.luaL_newstate&lt;LuaState&gt;();
            var num  = l.lua_tonumber&lt;LuaNumber&gt;(L, 1);
        }
        ```

        🍱 Damn customizable:

        ```csharp
        var l = new Lua&lt;ILua52&gt;("Lua52.dll");

            l.API.pushcclosure(L, onProc, 0);
            l.bind&lt;Action&lt;LuaState, LuaCFunction, int&gt;&gt;("pushcclosure")(L, onProc, 0);
            l.v&lt;ILua53&gt;().pushcclosure(L, onProc, 0);
            ...
        ```

        🔖 Modern .NET Core

        LuNari is ready for .NET Core starting from 1.6.
        Its awesome dynamic features are also available even for .NET Standard 2.0
        https://github.com/3F/Conari/issues/13


        🌚 Unlimited extensible features:

        Since this works through Conari ( https://github.com/3F/Conari ),
        you can access to all newest features of the Lua immediately after introducing this in draft. 
        Just use it without waiting for release.



    =======================================
    gnt /p:ngpackages="LuNari/$(Version)"
    ================== https://github.com/3F/GetNuTool

    Build info:

    $(BuildInfoVSSBE)
    </Description>
    <PackageOwners>reg</PackageOwners>
    <PackageProjectUrl>https://github.com/3F/LuNari</PackageProjectUrl>
    <RepositoryUrl>https://github.com/3F/LuNari</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Lua Lua54 Lua53 Lua52 Lua51 LuNari LunaRoad KeraLua NLua LuaInterface Conari API dll dotnet dotnetcore</PackageTags>
    <PackageReleaseNotes>changelog: https://github.com/3F/LuNari/blob/master/changelog.txt </PackageReleaseNotes>
    <Authors>github.com/3F/LuNari</Authors>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <NoWarn>1701;1702;CS1591;IDE1006</NoWarn>
    <LangVersion>latest</LangVersion>
    <PackageIconUrl>https://raw.githubusercontent.com/3F/LuNari/master/LuNari/Resources/LuNari.png</PackageIconUrl>
  </PropertyGroup>

  <PropertyGroup>
    <IsNetCoreFamilyTarget>false</IsNetCoreFamilyTarget>
    <IsNetCoreFamilyTarget Condition="$(TargetFramework.StartsWith('nets')) Or $(TargetFramework.StartsWith('netc'))">true</IsNetCoreFamilyTarget>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' Or '$(Configuration)' == 'PublicRelease' ">
    <DefineConstants />
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsNetCoreFamilyTarget)' == 'true'">
    <DefineConstants>$(DefineConstants);NETCORE</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE" Pack="true" PackagePath="" />
    <None Include="..\Readme.md" Pack="true" PackagePath="" />
    <None Include="..\3rd-party.txt" Pack="true" PackagePath="" />
    <None Include="..\changelog.txt" Pack="true" PackagePath="" />
    <None Include="..\.version" Pack="true" PackagePath="" />
    <!-- NuGet bug when naming with 'build' keyword: https://github.com/NuGet/Home/issues/8810 -->
    <None Include="obj\release-info.txt" Condition="Exists('obj\release-info.txt')" Pack="true" PackagePath="" />
    <None Include="Resources\LuNari.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\tools\hMSBuild.bat" Pack="true" PackagePath="tools\" />
    <None Include="..\tools\gnt.bat" Pack="true" PackagePath="tools\" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNetCoreFamilyTarget)' != 'true'">
    <Reference Include="System.Core" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Conari\Conari\Conari.csproj">
      <Project>{27152fd4-7b94-4af0-a7ed-be7e7a196d57}</Project>
      <Name>Conari</Name>
    </ProjectReference>
  </ItemGroup>

</Project> 