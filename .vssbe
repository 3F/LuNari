{
  "Header": {
    "_": [
      " It requires vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * https://github.com/3F/vsSolutionBuildEvent",
      "  * https://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      " Feedback: github.com/3F  or entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "TryComponent",
      "Enabled": true
    },
    {
      "ClassName": "OwpComponent",
      "Enabled": true
    },
    {
      "ClassName": "NuGetComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DteComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "BoxComponent",
      "Enabled": true
    },
    {
      "ClassName": "SevenZipComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "EvMSBuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[($(Configuration) == \"PublicRelease\") {\n    #[$(cfgname = 'Release')]\n    $(isCIBuild = true)\n}\nelse{\n    #[$(cfgname = $(Configuration))]\n}]\n\n#[$(dbin = \"bin/$(cfgname)/\")]\n\n$(revDeltaBase = \"2017/02/07\")\n$(revDeltaMin = $([System.Math]::Pow(10, 3)))\n$(revDeltaMax = 65534)\n\n\n$(netstamp  = $(TargetFrameworkVersion.Replace('v', '').Replace('.', '')))\n\n$(pDir  = \"LuNari\")\n$(odir  = \"$(dbin)raw\")\n\n#[var +revBuild]\n#[var +bSha1]\n#[var +bName]\n#[var +bRevc]\n\n#[var pVer = #[File get(\".version\")]]\n\n##[IO delete.directory(\"$(dbin)\", true)]\n#[IO copy.directory(\"\", \"$(dbin)\", true)]",
        "Command__": [
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "    $(isCIBuild = true)",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "",
          "$(revDeltaBase = \"2017/02/07\")",
          "$(revDeltaMin = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax = 65534)",
          "",
          "",
          "$(netstamp  = $(TargetFrameworkVersion.Replace('v', '').Replace('.', '')))",
          "",
          "$(pDir  = \"LuNari\")",
          "$(odir  = \"$(dbin)raw\")",
          "",
          "#[var +revBuild]",
          "#[var +bSha1]",
          "#[var +bName]",
          "#[var +bRevc]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "##[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPkg",
      "Caption": "Submodules and dep packages",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( !(#[IO exists.file(\"Conari/Conari.sln\")]) )\n{\n    #[File call(\"git\", \"submodule update --init --recursive Conari\", 1000)]\n}]\n\n#[\" Packages \"]\n\n#[( !(#[IO exists.file(\"packages/__checked\")]) )\n{\n    #[File call(\"tools\\hmsbuild.bat\", \"-vsw-priority Microsoft.NetCore.Component.SDK -t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]\n        \n    \n    #[IO copy.directory(\"\", \"packages/\", true)]\n    #[File write(\"packages/__checked\"): ]\n}]",
        "Command__": [
          "#[( !(#[IO exists.file(\"Conari/Conari.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive Conari\", 1000)]",
          "}]",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"tools\\hmsbuild.bat\", \"-vsw-priority Microsoft.NetCore.Component.SDK -t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]",
          "        ",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVer",
      "Caption": "Update version number ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( ! $(isCIBuild) ) {\n    #[IO replace.Regex(\"$(pDir)/LuNariVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]\n}]\n\n#[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]",
        "Command__": [
          "#[( ! $(isCIBuild) ) {",
          "    #[IO replace.Regex(\"$(pDir)/LuNariVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "}]",
          "",
          "#[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActLuNariVersion",
      "Caption": "Update LuNariVersion",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [
        "PublicRelease|Any CPU",
        "PublicRelease|x64",
        "PublicRelease|x86"
      ],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var tpl = // This code was generated by a vsSolutionBuildEvent. \n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\nnamespace net.r_eg.LuNari\n{\n    using System;\n\n    public struct LuNariVersion\n    {\n        public static readonly Version number = new Version(S_NUM_REV);\n\n        public const string S_NUM = \"%S_NUM%\";\n        public const string S_REV = \"%S_REV%\";\n\n        public const string S_NUM_REV = S_NUM + \".\" + S_REV;\n\n        public const string BRANCH_SHA1 = \"%B_SHA1%\";\n        public const string BRANCH_NAME = \"%B_NAME%\";\n        public const string BRANCH_REVC = \"%B_REVC%\";\n\n        internal const string S_INFO        = S_NUM_REV + \"+\" + BRANCH_SHA1;\n        internal const string S_INFO_FULL   = S_INFO + \":\" + BRANCH_NAME + \"-\" + BRANCH_REVC;\n    }\n}]\n\n#[\" \n    Calculate revision\n\"]\n#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]\n#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]\n#[var revBuild  = #[$(\n                    [System.TimeSpan]::FromTicks('$(\n                        [MSBuild]::Subtract($(tNow), $(tBase))\n                    )')\n                    .TotalMinutes.ToString('0'))]]\n                     \n#[var revBuild  = #[$(\n                    [MSBuild]::Add(\n                        $(revDeltaMin), \n                        $([MSBuild]::Modulo(\n                            $(revBuild), \n                            $([MSBuild]::Subtract(\n                                $(revDeltaMax), $(revDeltaMin)\n                             ))\n                         ))\n                     )\n                   )]\n]\n\n#[\" \n    Remove placeholders\n\"]\n#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\"))]\n\n#[\" \n    Checking of the git to define sha1, branch name, etc.\n\"]\n#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]\n#[( $(isGit) == \"\" )\n{\n    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]\n    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]\n    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]\n    \n    #[($(bName) == \"HEAD\") {\n        #[var bName = $(APPVEYOR_REPO_BRANCH)]\n    }]\n}\nelse {\n    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]\n}]\n\n#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")\n                   .Replace(\"%B_NAME%\", \"#[var bName]\")\n                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]\n\n#[\" \n    Save result\n\"]\n#[File write(\"$(pDir)/LuNariVersion.cs\"):#[var tpl]]",
        "Command__": [
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.LuNari",
          "{",
          "    using System;",
          "",
          "    public struct LuNariVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"%S_NUM%\";",
          "        public const string S_REV = \"%S_REV%\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string BRANCH_SHA1 = \"%B_SHA1%\";",
          "        public const string BRANCH_NAME = \"%B_NAME%\";",
          "        public const string BRANCH_REVC = \"%B_REVC%\";",
          "",
          "        internal const string S_INFO        = S_NUM_REV + \"+\" + BRANCH_SHA1;",
          "        internal const string S_INFO_FULL   = S_INFO + \":\" + BRANCH_NAME + \"-\" + BRANCH_REVC;",
          "    }",
          "}]",
          "",
          "#[\" ",
          "    Calculate revision",
          "\"]",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "                    [System.TimeSpan]::FromTicks('$(",
          "                        [MSBuild]::Subtract($(tNow), $(tBase))",
          "                    )')",
          "                    .TotalMinutes.ToString('0'))]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "                    [MSBuild]::Add(",
          "                        $(revDeltaMin), ",
          "                        $([MSBuild]::Modulo(",
          "                            $(revBuild), ",
          "                            $([MSBuild]::Subtract(",
          "                                $(revDeltaMax), $(revDeltaMin)",
          "                             ))",
          "                         ))",
          "                     )",
          "                   )]",
          "]",
          "",
          "#[\" ",
          "    Remove placeholders",
          "\"]",
          "#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\"))]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")",
          "                   .Replace(\"%B_NAME%\", \"#[var bName]\")",
          "                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]",
          "",
          "#[\" ",
          "    Save result",
          "\"]",
          "#[File write(\"$(pDir)/LuNariVersion.cs\"):#[var tpl]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var buildInfo =  $([System.String]::Concat(\"  \"))\n    S_NUM:          #[$(pVer)]\n    \n    S_REV:          #[$(revBuild)]\n    \n    S_NUM_REV:      #[$(pVer)].#[$(revBuild)]\n    \n    bSha1:          #[$(bSha1)]\n    \n    bName:          #[$(bName)]\n    \n    bRevc:          #[$(bRevc)]\n    \n    Configuration:  #[$(Configuration)]\n    \n    Platforms:      #[$(TargetFrameworks)]\n    \n    revDeltaBase:   #[$(revDeltaBase)]\n    \n    revDeltaMin:    #[$(revDeltaMin)]\n    \n    revDeltaMax:    #[$(revDeltaMax)]\n    \n    \n                    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]\n]\n\n#[( $(isCIBuild) ) { \n    #[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo)</BuildInfoVSSBE>\")]\n}else{\n    #[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]\n}]\n\n#[IO copy.directory(\"\", \"$(pDir)/obj/\", true)]\n#[IO writeLine(\"$(pDir)/obj/release-info.txt\"):#[var buildInfo]]",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    S_NUM:          #[$(pVer)]",
          "    ",
          "    S_REV:          #[$(revBuild)]",
          "    ",
          "    S_NUM_REV:      #[$(pVer)].#[$(revBuild)]",
          "    ",
          "    bSha1:          #[$(bSha1)]",
          "    ",
          "    bName:          #[$(bName)]",
          "    ",
          "    bRevc:          #[$(bRevc)]",
          "    ",
          "    Configuration:  #[$(Configuration)]",
          "    ",
          "    Platforms:      #[$(TargetFrameworks)]",
          "    ",
          "    revDeltaBase:   #[$(revDeltaBase)]",
          "    ",
          "    revDeltaMin:    #[$(revDeltaMin)]",
          "    ",
          "    revDeltaMax:    #[$(revDeltaMax)]",
          "    ",
          "    ",
          "                    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( $(isCIBuild) ) { ",
          "    #[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo)</BuildInfoVSSBE>\")]",
          "}else{",
          "    #[IO replace.Regex(\"$(pDir)/LuNari.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]",
          "}]",
          "",
          "#[IO copy.directory(\"\", \"$(pDir)/obj/\", true)]",
          "#[IO writeLine(\"$(pDir)/obj/release-info.txt\"):#[var buildInfo]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[IO copy.file(\"LICENSE\", \"$(odir)/License.txt\", true)]\n#[IO copy.file(\n    {\"Readme.md\", \"3rd-party.txt\", \"changelog.txt\", \".version\", \"$(pDir)/obj/release-info.txt\"}, \n    \"$(odir)/\", true\n)]\n\n[( $(cfgname) == \"Release\" )\n{\n\n    #[$(_targets = $(TargetFrameworks:LuNari))]\n    #[$(_loop = true)]\n    \n    #[Box iterate(i = 0; $(_loop); i += 1): \n      #[try\n      {\n        \n        #[$(_target = $(_targets.Split(\";\")[$(i)]))]\n        \n        #[IO copy.file\n        (\n            \"$(pDir)/$(OutputPath:$(pDir))/$(_target)/*.*\", \n            \"$(odir)/lib/$(_target)/\", \n            true,\n            {\"*.json\", \"Conari.*\"}\n        )]\n      }\n      catch { $(_loop = false) }]\n    ]\n    \n}]\n\nConari Tests:\n#[IO copy.file(\"Conari\\UnLib\\bin\\$(cfgname)\\*.dll\", \"Conari\\ConariTest\\$(OutputPath:ConariTest)\\..\\\\\", true)]\n\n##[IO copy.file({\"tools/*.bat\", \"tools/hMSBuild.bat\"}, \"$(odir)/tools/\", true)]\n",
        "Command__": [
          "#[IO copy.file(\"LICENSE\", \"$(odir)/License.txt\", true)]",
          "#[IO copy.file(",
          "    {\"Readme.md\", \"3rd-party.txt\", \"changelog.txt\", \".version\", \"$(pDir)/obj/release-info.txt\"}, ",
          "    \"$(odir)/\", true",
          ")]",
          "",
          "[( $(cfgname) == \"Release\" )",
          "{",
          "",
          "    #[$(_targets = $(TargetFrameworks:LuNari))]",
          "    #[$(_loop = true)]",
          "    ",
          "    #[Box iterate(i = 0; $(_loop); i += 1): ",
          "      #[try",
          "      {",
          "        ",
          "        #[$(_target = $(_targets.Split(\";\")[$(i)]))]",
          "        ",
          "        #[IO copy.file",
          "        (",
          "            \"$(pDir)/$(OutputPath:$(pDir))/$(_target)/*.*\", ",
          "            \"$(odir)/lib/$(_target)/\", ",
          "            true,",
          "            {\"*.json\", \"Conari.*\"}",
          "        )]",
          "      }",
          "      catch { $(_loop = false) }]",
          "    ]",
          "    ",
          "}]",
          "",
          "Conari Tests:",
          "#[IO copy.file(\"Conari\\UnLib\\bin\\$(cfgname)\\*.dll\", \"Conari\\ConariTest\\$(OutputPath:ConariTest)\\..\\\\\", true)]",
          "",
          "##[IO copy.file({\"tools/*.bat\", \"tools/hMSBuild.bat\"}, \"$(odir)/tools/\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "Packing with GetNuTool ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( $(cfgname) == \"Release\" )\n{\n    \n    #[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {\n        #[$(zipname = \"LuNari.$(pVer).zip\")]\n    }\n    else {\n        #[$(zipname = \"LuNari.$(pVer).$(revBuild)+$(bSha1).zip\")]\n    }]\n    \n    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\$(zipname)\")]\n\n}]\n\n\n#[IO copy.file\n(\n    \"$(pDir)/$(OutputPath:$(pDir))/*$(pVer).nupkg\",\n    \"$(dbin)/\", \n    true \n)]",
        "Command__": [
          "#[( $(cfgname) == \"Release\" )",
          "{",
          "    ",
          "    #[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {",
          "        #[$(zipname = \"LuNari.$(pVer).zip\")]",
          "    }",
          "    else {",
          "        #[$(zipname = \"LuNari.$(pVer).$(revBuild)+$(bSha1).zip\")]",
          "    }]",
          "    ",
          "    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\$(zipname)\")]",
          "",
          "}]",
          "",
          "",
          "#[IO copy.file",
          "(",
          "    \"$(pDir)/$(OutputPath:$(pDir))/*$(pVer).nupkg\",",
          "    \"$(dbin)/\", ",
          "    true ",
          ")]"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": [],
  "SlnOpened": [
    {
      "Enabled": false,
      "Name": "ActReload",
      "Caption": "[obsolete] Reload projects in solution after adding submodules",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": false,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System",
          "Microsoft.VisualStudio.Shell.Interop.10.0",
          "Microsoft.VisualStudio.Shell.Interop",
          "Microsoft.VisualStudio.Shell.10.0",
          "Microsoft.VisualStudio.Shell.Interop.9.0",
          "Microsoft.VisualStudio.Shell.Interop.8.0",
          "Microsoft.VisualStudio.OLE.Interop"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "LastTime": 0,
        "Command": "//#[($(ProjectDir:Conari) == \"*Undefined*\" && ( $(BuildingInsideVisualStudio) || $(VSIDE) || $(DevEnvDir) != \"*Undefined*\") ) {\n\nusing System;\nusing Microsoft.VisualStudio;\nusing Microsoft.VisualStudio.Shell.Interop;\nusing ICommand = net.r_eg.vsSBE.Actions.ICommand;\nusing ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;\n\nnamespace vsSolutionBuildEvent\n{\n    public class CSharpMode\n    {\n        public static int Init(ICommand cmd, ISolutionEvent evt)\n        {\n            System.Diagnostics.Process.Start(@\"$(SolutionDir)submodules.bat\").WaitForExit();\n\n            object service      = Microsoft.VisualStudio.Shell.Package.GetGlobalService(typeof(IVsSolution));\n            IVsSolution sln     = (IVsSolution)service;\n            IVsSolution4 sln4   = (IVsSolution4)service;\n\n            IEnumHierarchies projects;\n            Guid gtype = Guid.Empty;\n            if(ErrorHandler.Failed(sln.GetProjectEnum((int)__VSENUMPROJFLAGS.EPF_UNLOADEDINSOLUTION  /*EPF_ALLPROJECTS*/, ref gtype, out projects))) {\n                return 0;\n            }\n\n            var phr = new IVsHierarchy[1];\n            uint count;\n            while((projects.Next((uint)phr.Length, phr, out count) == VSConstants.S_OK) && (count > 0))\n            {\n                Guid pGuid;\n                if(ErrorHandler.Failed(sln.GetGuidOfProject(phr[0], out pGuid))) {\n                    continue;\n                }\n                sln4.EnsureProjectIsLoaded(ref pGuid, (uint)__VSBSLFLAGS.VSBSLFLAGS_None);\n            }\n            \n            return 0;\n        }\n    }\n}\n\n//}]",
        "Command__": [
          "//#[($(ProjectDir:Conari) == \"*Undefined*\" && ( $(BuildingInsideVisualStudio) || $(VSIDE) || $(DevEnvDir) != \"*Undefined*\") ) {",
          "",
          "using System;",
          "using Microsoft.VisualStudio;",
          "using Microsoft.VisualStudio.Shell.Interop;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            System.Diagnostics.Process.Start(@\"$(SolutionDir)submodules.bat\").WaitForExit();",
          "",
          "            object service      = Microsoft.VisualStudio.Shell.Package.GetGlobalService(typeof(IVsSolution));",
          "            IVsSolution sln     = (IVsSolution)service;",
          "            IVsSolution4 sln4   = (IVsSolution4)service;",
          "",
          "            IEnumHierarchies projects;",
          "            Guid gtype = Guid.Empty;",
          "            if(ErrorHandler.Failed(sln.GetProjectEnum((int)__VSENUMPROJFLAGS.EPF_UNLOADEDINSOLUTION  /*EPF_ALLPROJECTS*/, ref gtype, out projects))) {",
          "                return 0;",
          "            }",
          "",
          "            var phr = new IVsHierarchy[1];",
          "            uint count;",
          "            while((projects.Next((uint)phr.Length, phr, out count) == VSConstants.S_OK) && (count > 0))",
          "            {",
          "                Guid pGuid;",
          "                if(ErrorHandler.Failed(sln.GetGuidOfProject(phr[0], out pGuid))) {",
          "                    continue;",
          "                }",
          "                sln4.EnsureProjectIsLoaded(ref pGuid, (uint)__VSBSLFLAGS.VSBSLFLAGS_None);",
          "            }",
          "            ",
          "            return 0;",
          "        }",
          "    }",
          "}",
          "",
          "//}]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "ModernReload",
      "Caption": "v0.12.8+: Reload projects in solution after adding git submodules",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Before",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[$(moduleConari = \"Conari/Conari.sln\")]\n\n#[( #[IO exists.file(\"$(moduleConari)\")] )\n{ \n    #[File scall(\"submodules.bat\", \"$(moduleConari)\", 400)]\n}\nelse{\n    #[File call(\"submodules.bat\", \"$(moduleConari)\", 2000)]\n}]",
        "Command__": [
          "#[$(moduleConari = \"Conari/Conari.sln\")]",
          "",
          "#[( #[IO exists.file(\"$(moduleConari)\")] )",
          "{ ",
          "    #[File scall(\"submodules.bat\", \"$(moduleConari)\", 400)]",
          "}",
          "else{",
          "    #[File call(\"submodules.bat\", \"$(moduleConari)\", 2000)]",
          "}]"
        ]
      }
    }
  ],
  "SlnClosed": []
}