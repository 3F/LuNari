- - - - - 
LunaRoad
_ _ _ _ _

[v1.4-beta]

    * CHANGED: Updated Conari engine v1.1
               https://github.com/3F/Conari

    * NEW: DLR features with caching of dynamic types.
    * NEW: Added access to export functions of Lua. `ILoader.ExportFunctionNames`
    * NEW: Added features for convenient work with any binary raw data.
    * NEW: Added events:
           * BeforeUnload - Before unloading a library.
           * AfterUnload - When library has been unloaded.
           * AfterLoad - When library has been loaded.
           * PrefixChanged - When Prefix has been changed.

    * FIXED: bug with CharPtr when unboxing for unmanaged code.
    * FIXED: trivial fixes with implicit conversion for size_t and UIntPtr.
    * CHANGED: Updated CharPtr: +BSTR, +WCharPtr & added new UnmanagedString, that allocates strings for unmanaged code.
    * CHANGED: Other trivial fixes and improvements.

[v1.3-beta]

    * CHANGED: The LunaRoad now works over Conari engine v1.0
               https://github.com/3F/Conari
               
               That adds the following important changes for LunaRoad:
               
               * NEW: Added additional delegates for work with ref/out parameters. And now it is part of Conari.
               * NEW: IL EmitCalli - now supports of nested implicit conversions.
                      The [NativeType] attribute available to change priority of selecting type for unmanaged code.
                          
               * CHANGED: updated size_t for work with primitives types directly.
               * CHANGED: all common types now is also part of Conari.
               
[v1.2-beta]

    * NEW: LuaInteger type.
    * NEW: The lua.h constants of v5.1/2/3 represented with LuaH.
    * NEW: API. added:
            * `void lua_settop (lua_State *L, int index);` /v5.1, 5.2, 5.3
            * `int lua_gettop (lua_State *L);` /v5.1, 5.2, 5.3
            * `void lua_pushvalue (lua_State *L, int index);` /v5.1, 5.2, 5.3
            * `void lua_getfield (lua_State *L, int index, const char *k);` /v5.1, 5.2
            * * int lua_getfield (lua_State *L, int index, const char *k);` /v5.3
            * `void rawset(LuaState L, int index);` /v5.1; 5.2; 5.3
            * `void rawseti(LuaState L, int index, int n);` /v5.1; 5.2
            * * `void rawseti(LuaState L, int index, LuaInteger i);` /v5.3
            * `int rawget (lua_State *L, int index);` /v5.3
            * * `void rawget(LuaState L, int index);` /v5.1; v5.2
            * `int rawgeti(LuaState L, int index, LuaInteger n);` /v5.3
            * * `void rawgeti(LuaState L, int index, int n);` /v5.1; 5.2
            * `int gettable(LuaState L, int index);` /v5.3
            * * `void gettable(LuaState L, int index);` /v5.1; 5.2
            * `int lua_type (lua_State *L, int index);` /v5.1; 5.2; 5.3
            * `void lua_getglobal (lua_State *L, const char *name);` /v5.1; 5.2
            * * `int lua_getglobal (lua_State *L, const char *name);` /v5.3
            * `void pop(LuaState L, int n);` /v5.1; 5.2; 5.3
            * `void pushinteger(LuaState L, LuaInteger n);` /v5.1; 5.2; 5.3
            * `int pushthread(LuaState L);` /v5.1; 5.2; 5.3
            * `void pushnil(LuaState L);` /v5.1; 5.2; 5.3
            * `int pcall(LuaState L, int nargs, int nresults, int errfunc);` /v5.1; 5.2; 5.3
            * `void lua_call (lua_State *L, int nargs, int nresults);` /v5.1; 5.2; 5.3
            
    * CHANGED: Pseudo-indices for Lua5.1 now is part of LuaH.
    * CHANGED: Additional Lua .ctor(string) - the LuaConfig now has only explicit conversions to avoid misunderstanding.

[v1.1-beta]

    * NEW: IL EmitCalli - support of implicit/explicit conversions with additional types.
    * NEW: added Func/ActionOut delegates to work with ByRef-arguments.
    * NEW: added additional types: LuaNumber, CharPtr, size_t
    * NEW: API. added:
            * `CharPtr tolstring(LuaState L, int index, out size_t len)`    - v5.1/5.2/5.3
            * `void pushnumber(LuaState L, LuaNumber n)`                    - v5.1/5.2/5.3
            * `void pushstring(LuaState L, string s)`                       - v5.1
                * `CharPtr pushstring(LuaState L, string s)`                - v5.2/5.3
                
    * CHANGED: API. `LuaNumber tonumber(LuaState L, int index);`            - v5.1/5.2/5.3

[v1.0-alpha]

    * Initial alpha release. 
      Flexible binding via lambda-functions and lightweight platform to work between different versions.

